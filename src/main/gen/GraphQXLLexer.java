// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: GraphQXL.flex


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;

import static com.github.gabotechs.graphqxlideaplugin.language.psi.GraphQXLTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a>
 * from the specification file <tt>src/grammars/GraphQXLLexer.flex</tt>
 */

public class GraphQXLLexer implements FlexLexer {
    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int QUOTED_STRING = 2;
    public static final int BLOCK_STRING = 4;
    public static final int VARIABLE_OR_TEMPLATE = 6;
    public static final int TEMPLATE = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\36\u0100\1\u0400\u1001\u0100";

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4" +
                    "\1\5\1\6\1\7\1\0\1\10\1\0\1\11\1\12" +
                    "\1\0\1\13\1\14\1\15\1\16\1\0\1\17\11\20" +
                    "\1\21\1\0\1\22\1\23\1\24\1\0\1\25\4\26" +
                    "\1\27\25\26\1\30\1\31\1\32\1\0\1\26\1\0" +
                    "\1\33\1\34\1\35\1\36\1\37\1\40\1\26\1\41" +
                    "\1\42\2\26\1\43\1\44\1\45\1\46\1\47\1\50" +
                    "\1\51\1\52\1\53\1\54\1\55\1\26\1\56\1\57" +
                    "\1\26\1\60\1\61\1\62\7\0\1\3\u01a2\0\2\3" +
                    "\326\0\u0100\3\377\0\1\14";

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[1280];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                    "\1\10\1\11\1\2\2\1\2\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\12\20\1\23\1\24" +
                    "\1\25\1\26\1\27\1\30\1\27\3\26\1\31\1\32" +
                    "\1\33\1\34\1\35\1\0\1\36\1\37\3\0\6\20" +
                    "\1\40\6\20\1\0\1\41\1\0\1\26\1\0\1\42" +
                    "\1\43\1\44\1\0\1\44\16\20\1\45\1\0\1\20" +
                    "\1\46\13\20\1\47\5\20\1\50\2\20\1\51\4\20" +
                    "\1\52\1\20\1\53\1\20\1\54\3\20\1\55\1\56" +
                    "\12\20\1\57\2\20\1\60\1\20\1\61\2\20\1\62" +
                    "\1\63\2\20\1\64";

    private static int[] zzUnpackAction() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\377" +
                    "\0\u0165\0\u0198\0\u01cb\0\377\0\377\0\377\0\377\0\u01fe" +
                    "\0\u0231\0\u0264\0\u0297\0\377\0\377\0\377\0\377\0\377" +
                    "\0\u02ca\0\377\0\377\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9" +
                    "\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\377\0\377\0\377" +
                    "\0\u04fb\0\377\0\377\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa" +
                    "\0\377\0\u062d\0\377\0\377\0\u0660\0\u0693\0\377\0\u06c6" +
                    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e" +
                    "\0\u02ca\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u052e" +
                    "\0\377\0\u09c3\0\377\0\u09f6\0\377\0\377\0\u0a29\0\u0a5c" +
                    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1" +
                    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\377" +
                    "\0\u0d59\0\u0d8c\0\u02ca\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b" +
                    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u02ca\0\u0ff0" +
                    "\0\u1023\0\u1056\0\u1089\0\u10bc\0\u02ca\0\u10ef\0\u1122\0\u02ca" +
                    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u02ca\0\u1221\0\u02ca\0\u1254" +
                    "\0\u02ca\0\u1287\0\u12ba\0\u12ed\0\u02ca\0\u02ca\0\u1320\0\u1353" +
                    "\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb" +
                    "\0\u02ca\0\u151e\0\u1551\0\u02ca\0\u1584\0\u02ca\0\u15b7\0\u15ea" +
                    "\0\u02ca\0\u02ca\0\u161d\0\u1650\0\u02ca";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\2\7\1\6\1\10\1\11\1\12\1\13\1\14" +
                    "\1\15\1\16\1\6\1\17\1\20\1\21\1\22\1\23" +
                    "\1\24\1\25\1\26\1\27\1\30\2\31\1\32\1\6" +
                    "\1\33\3\31\1\34\1\35\2\31\1\36\1\31\1\37" +
                    "\1\31\1\40\1\31\1\41\1\42\1\43\1\44\1\45" +
                    "\3\31\1\46\1\47\1\50\2\51\1\52\2\51\1\53" +
                    "\23\51\1\54\31\51\1\55\2\7\2\55\1\56\23\55" +
                    "\1\57\31\55\26\52\2\60\3\52\25\60\1\61\2\52" +
                    "\60\62\1\63\1\62\1\64\64\0\2\7\65\0\1\65" +
                    "\55\0\2\12\2\0\57\12\26\0\2\66\3\0\25\66" +
                    "\1\67\21\0\1\22\1\23\60\0\1\70\62\0\1\71" +
                    "\10\0\1\72\7\0\1\72\41\0\1\71\2\23\6\0" +
                    "\1\72\7\0\1\72\42\0\2\31\5\0\2\31\3\0" +
                    "\25\31\22\0\2\31\5\0\2\31\3\0\7\31\1\73" +
                    "\15\31\22\0\2\31\5\0\2\31\3\0\12\31\1\74" +
                    "\10\31\1\75\1\31\22\0\2\31\5\0\2\31\3\0" +
                    "\11\31\1\76\1\77\12\31\22\0\2\31\5\0\2\31" +
                    "\3\0\21\31\1\100\3\31\22\0\2\31\5\0\2\31" +
                    "\3\0\12\31\1\101\12\31\22\0\2\31\5\0\2\31" +
                    "\3\0\21\31\1\102\3\31\22\0\2\31\5\0\2\31" +
                    "\3\0\4\31\1\103\20\31\22\0\2\31\5\0\2\31" +
                    "\3\0\2\31\1\104\16\31\1\105\3\31\22\0\2\31" +
                    "\5\0\2\31\3\0\24\31\1\106\22\0\2\31\5\0" +
                    "\2\31\3\0\12\31\1\107\12\31\3\0\2\51\1\0" +
                    "\2\51\1\0\23\51\1\110\33\51\1\0\60\51\1\55" +
                    "\2\0\2\55\1\0\23\55\1\0\31\55\5\111\1\112" +
                    "\55\111\1\113\2\0\2\113\1\114\23\113\1\0\31\113" +
                    "\17\0\2\60\5\0\2\60\3\0\25\60\3\0\60\62" +
                    "\1\0\1\62\6\0\1\115\74\0\2\66\5\0\2\66" +
                    "\3\0\25\66\21\0\1\116\63\0\2\117\55\0\1\120" +
                    "\1\0\1\120\1\0\2\121\61\0\2\31\5\0\2\31" +
                    "\3\0\16\31\1\122\6\31\22\0\2\31\5\0\2\31" +
                    "\3\0\21\31\1\123\3\31\22\0\2\31\5\0\2\31" +
                    "\3\0\20\31\1\124\4\31\22\0\2\31\5\0\2\31" +
                    "\3\0\14\31\1\125\10\31\22\0\2\31\5\0\2\31" +
                    "\3\0\14\31\1\126\3\31\1\127\4\31\22\0\2\31" +
                    "\5\0\2\31\3\0\20\31\1\130\4\31\22\0\2\31" +
                    "\5\0\2\31\3\0\4\31\1\131\20\31\22\0\2\31" +
                    "\5\0\2\31\3\0\14\31\1\132\10\31\22\0\2\31" +
                    "\5\0\2\31\3\0\1\133\5\31\1\134\16\31\22\0" +
                    "\2\31\5\0\2\31\3\0\1\31\1\135\23\31\22\0" +
                    "\2\31\5\0\2\31\3\0\14\31\1\136\10\31\22\0" +
                    "\2\31\5\0\2\31\3\0\7\31\1\137\15\31\3\0" +
                    "\5\111\1\140\55\111\5\0\1\141\74\0\2\117\6\0" +
                    "\1\72\7\0\1\72\42\0\2\121\61\0\2\31\5\0" +
                    "\2\31\3\0\4\31\1\142\20\31\22\0\2\31\5\0" +
                    "\2\31\3\0\11\31\1\143\13\31\22\0\2\31\5\0" +
                    "\2\31\3\0\4\31\1\144\20\31\22\0\2\31\5\0" +
                    "\2\31\3\0\10\31\1\145\2\31\1\146\11\31\22\0" +
                    "\2\31\5\0\2\31\3\0\21\31\1\147\3\31\22\0" +
                    "\2\31\5\0\2\31\3\0\4\31\1\150\20\31\22\0" +
                    "\2\31\5\0\2\31\3\0\1\151\24\31\22\0\2\31" +
                    "\5\0\2\31\3\0\16\31\1\152\6\31\22\0\2\31" +
                    "\5\0\2\31\3\0\4\31\1\153\20\31\22\0\2\31" +
                    "\5\0\2\31\3\0\10\31\1\154\14\31\22\0\2\31" +
                    "\5\0\2\31\3\0\4\31\1\155\20\31\22\0\2\31" +
                    "\5\0\2\31\3\0\17\31\1\156\5\31\22\0\2\31" +
                    "\5\0\2\31\3\0\4\31\1\157\20\31\22\0\2\31" +
                    "\5\0\2\31\3\0\13\31\1\160\11\31\10\0\1\113" +
                    "\74\0\2\31\5\0\2\31\3\0\2\31\1\161\22\31" +
                    "\22\0\2\31\5\0\2\31\3\0\12\31\1\162\12\31" +
                    "\22\0\2\31\5\0\2\31\3\0\4\31\1\163\20\31" +
                    "\22\0\2\31\5\0\2\31\3\0\16\31\1\164\6\31" +
                    "\22\0\2\31\5\0\2\31\3\0\20\31\1\165\4\31" +
                    "\22\0\2\31\5\0\2\31\3\0\16\31\1\166\6\31" +
                    "\22\0\2\31\5\0\2\31\3\0\20\31\1\167\4\31" +
                    "\22\0\2\31\5\0\2\31\3\0\24\31\1\170\22\0" +
                    "\2\31\5\0\2\31\3\0\1\171\24\31\22\0\2\31" +
                    "\5\0\2\31\3\0\1\172\24\31\22\0\2\31\5\0" +
                    "\2\31\3\0\11\31\1\173\13\31\22\0\2\31\5\0" +
                    "\2\31\3\0\2\31\1\174\22\31\22\0\2\31\5\0" +
                    "\2\31\3\0\12\31\1\175\12\31\22\0\2\31\5\0" +
                    "\2\31\3\0\20\31\1\176\4\31\22\0\2\31\5\0" +
                    "\2\31\3\0\3\31\1\177\21\31\22\0\2\31\5\0" +
                    "\2\31\3\0\11\31\1\200\13\31\22\0\2\31\5\0" +
                    "\2\31\3\0\20\31\1\201\4\31\22\0\2\31\5\0" +
                    "\2\31\3\0\5\31\1\202\17\31\22\0\2\31\5\0" +
                    "\2\31\3\0\7\31\1\203\15\31\22\0\2\31\5\0" +
                    "\2\31\3\0\20\31\1\204\4\31\22\0\2\31\5\0" +
                    "\2\31\3\0\16\31\1\205\6\31\22\0\2\31\5\0" +
                    "\2\31\3\0\1\206\24\31\22\0\2\31\5\0\2\31" +
                    "\3\0\16\31\1\207\6\31\22\0\2\31\5\0\2\31" +
                    "\3\0\7\31\1\210\15\31\22\0\2\31\5\0\2\31" +
                    "\3\0\4\31\1\211\20\31\22\0\2\31\5\0\2\31" +
                    "\3\0\1\212\24\31\22\0\2\31\5\0\2\31\3\0" +
                    "\13\31\1\213\11\31\22\0\2\31\5\0\2\31\3\0" +
                    "\1\214\24\31\22\0\2\31\5\0\2\31\3\0\7\31" +
                    "\1\215\15\31\22\0\2\31\5\0\2\31\3\0\22\31" +
                    "\1\216\2\31\22\0\2\31\5\0\2\31\3\0\12\31" +
                    "\1\217\12\31\22\0\2\31\5\0\2\31\3\0\2\31" +
                    "\1\220\22\31\22\0\2\31\5\0\2\31\3\0\12\31" +
                    "\1\221\12\31\22\0\2\31\5\0\2\31\3\0\1\31" +
                    "\1\222\23\31\22\0\2\31\5\0\2\31\3\0\14\31" +
                    "\1\223\10\31\22\0\2\31\5\0\2\31\3\0\4\31" +
                    "\1\224\20\31\22\0\2\31\5\0\2\31\3\0\20\31" +
                    "\1\225\4\31\22\0\2\31\5\0\2\31\3\0\4\31" +
                    "\1\226\20\31\22\0\2\31\5\0\2\31\3\0\10\31" +
                    "\1\227\14\31\22\0\2\31\5\0\2\31\3\0\20\31" +
                    "\1\230\4\31\22\0\2\31\5\0\2\31\3\0\17\31" +
                    "\1\231\5\31\22\0\2\31\5\0\2\31\3\0\4\31" +
                    "\1\232\20\31\22\0\2\31\5\0\2\31\3\0\7\31" +
                    "\1\233\15\31\22\0\2\31\5\0\2\31\3\0\13\31" +
                    "\1\234\11\31\22\0\2\31\5\0\2\31\3\0\12\31" +
                    "\1\235\12\31\3\0";

    private static int[] zzUnpacktrans() {
        int[] result = new int[5763];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\1\11\1\1\1\11\3\1\4\11\4\1\5\11" +
                    "\1\1\2\11\12\1\3\11\1\1\2\11\5\1\1\11" +
                    "\1\1\2\11\1\0\1\1\1\11\3\0\15\1\1\0" +
                    "\1\11\1\0\1\11\1\0\2\11\1\1\1\0\17\1" +
                    "\1\11\1\0\74\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[157];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private int yyline;

    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    protected int yycolumn;

    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;

    /* user code: */

    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    protected final Stack<State> myStateStack = new Stack<State>();
    protected int myLeftBraceCount;

    private void pushState(int state) {
        myStateStack.push(new State(yystate(), myLeftBraceCount));
        myLeftBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = myStateStack.pop();
        myLeftBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public GraphQXLLexer() {
        this((java.io.Reader) null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public GraphQXLLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Returns the maximum size of the scanner buffer, which limits the size of tokens.
     */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**
     * Whether the scanner buffer can grow to accommodate a larger token.
     */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

            myLeftBraceCount = 0;
            myStateStack.clear();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 53:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 54:
                        break;
                    case 3: {
                        return BANG;
                    }
                    // fall through
                    case 55:
                        break;
                    case 4: {
                        pushState(QUOTED_STRING);
                        return OPEN_QUOTE;
                    }
                    // fall through
                    case 56:
                        break;
                    case 5: {
                        return EOL_COMMENT;
                    }
                    // fall through
                    case 57:
                        break;
                    case 6: {
                        pushState(VARIABLE_OR_TEMPLATE);
                        return DOLLAR;
                    }
                    // fall through
                    case 58:
                        break;
                    case 7: {
                        return AMP;
                    }
                    // fall through
                    case 59:
                        break;
                    case 8: {
                        return PAREN_L;
                    }
                    // fall through
                    case 60:
                        break;
                    case 9: {
                        return PAREN_R;
                    }
                    // fall through
                    case 61:
                        break;
                    case 10: {
                        return NUMBER;
                    }
                    // fall through
                    case 62:
                        break;
                    case 11: {
                        return COLON;
                    }
                    // fall through
                    case 63:
                        break;
                    case 12: {
                        return ANGLE_BRACKET_L;
                    }
                    // fall through
                    case 64:
                        break;
                    case 13: {
                        return EQUALS;
                    }
                    // fall through
                    case 65:
                        break;
                    case 14: {
                        return ANGLE_BRACKET_R;
                    }
                    // fall through
                    case 66:
                        break;
                    case 15: {
                        return AT;
                    }
                    // fall through
                    case 67:
                        break;
                    case 16: {
                        return NAME;
                    }
                    // fall through
                    case 68:
                        break;
                    case 17: {
                        return BRACKET_L;
                    }
                    // fall through
                    case 69:
                        break;
                    case 18: {
                        return BRACKET_R;
                    }
                    // fall through
                    case 70:
                        break;
                    case 19: {
                        return BRACE_L;
                    }
                    // fall through
                    case 71:
                        break;
                    case 20: {
                        return PIPE;
                    }
                    // fall through
                    case 72:
                        break;
                    case 21: {
                        return BRACE_R;
                    }
                    // fall through
                    case 73:
                        break;
                    case 22: {
                        return REGULAR_STRING_PART;
                    }
                    // fall through
                    case 74:
                        break;
                    case 23: {
                        popState();
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 75:
                        break;
                    case 24: {
                        popState();
                        return CLOSING_QUOTE;
                    }
                    // fall through
                    case 76:
                        break;
                    case 25: {
                        popState();
                        return NAME;
                    }
                    // fall through
                    case 77:
                        break;
                    case 26: {
                        pushState(TEMPLATE);
                        return BRACE_L;
                    }
                    // fall through
                    case 78:
                        break;
                    case 27: {
                        return TEMPLATE_CHAR;
                    }
                    // fall through
                    case 79:
                        break;
                    case 28: {
                        myLeftBraceCount++;
                        return TEMPLATE_CHAR;
                    }
                    // fall through
                    case 80:
                        break;
                    case 29: {
                        if (myLeftBraceCount == 0) {
                            popState();
                            popState();
                            return BRACE_R;
                        }
                        myLeftBraceCount--;
                        return TEMPLATE_CHAR;
                    }
                    // fall through
                    case 81:
                        break;
                    case 30: {
                        return VARIABLE_NAME;
                    }
                    // fall through
                    case 82:
                        break;
                    case 31: {
                        return DOLLAR_BRACE_L;
                    }
                    // fall through
                    case 83:
                        break;
                    case 32: {
                        return ON_KEYWORD;
                    }
                    // fall through
                    case 84:
                        break;
                    case 33:
                        // lookahead expression with fixed lookahead length
                        zzMarkedPos = Character.offsetByCodePoints
                                (zzBufferL, zzMarkedPos, -1);
                    {
                        return REGULAR_STRING_PART;
                    }
                    // fall through
                    case 85:
                        break;
                    case 34: {
                        pushState(BLOCK_STRING);
                        return OPEN_TRIPLE_QUOTE;
                    }
                    // fall through
                    case 86:
                        break;
                    case 35: {
                        return SPREAD;
                    }
                    // fall through
                    case 87:
                        break;
                    case 36: {
                        return FLOAT_NUMBER;
                    }
                    // fall through
                    case 88:
                        break;
                    case 37: {
                        popState();
                        return CLOSING_TRIPLE_QUOTE;
                    }
                    // fall through
                    case 89:
                        break;
                    case 38: {
                        return ENUM_KEYWORD;
                    }
                    // fall through
                    case 90:
                        break;
                    case 39: {
                        return TYPE_KEYWORD;
                    }
                    // fall through
                    case 91:
                        break;
                    case 40: {
                        return INPUT_KEYWORD;
                    }
                    // fall through
                    case 92:
                        break;
                    case 41: {
                        return QUERY_KEYWORD;
                    }
                    // fall through
                    case 93:
                        break;
                    case 42: {
                        return UNION_KEYWORD;
                    }
                    // fall through
                    case 94:
                        break;
                    case 43: {
                        return EXTEND_KEYWORD;
                    }
                    // fall through
                    case 95:
                        break;
                    case 44: {
                        return IMPORT_KEYWORD;
                    }
                    // fall through
                    case 96:
                        break;
                    case 45: {
                        return SCALAR_KEYWORD;
                    }
                    // fall through
                    case 97:
                        break;
                    case 46: {
                        return SCHEMA_KEYWORD;
                    }
                    // fall through
                    case 98:
                        break;
                    case 47: {
                        return MUTATION_KEYWORD;
                    }
                    // fall through
                    case 99:
                        break;
                    case 48: {
                        return DIRECTIVE_KEYWORD;
                    }
                    // fall through
                    case 100:
                        break;
                    case 49: {
                        return INTERFACE_KEYWORD;
                    }
                    // fall through
                    case 101:
                        break;
                    case 50: {
                        return IMPLEMENTS_KEYWORD;
                    }
                    // fall through
                    case 102:
                        break;
                    case 51: {
                        return REPEATABLE_KEYWORD;
                    }
                    // fall through
                    case 103:
                        break;
                    case 52: {
                        return SUBSCRIPTION_KEYWORD;
                    }
                    // fall through
                    case 104:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
