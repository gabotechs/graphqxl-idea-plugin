{
  generate=[names="long" tokenAccessors="no"]
  parserClass="com.github.gabotechs.graphqxlideaplugin.language.GraphQXLParser"
  psiVisitorName="VisitorBase"

  implements="com.github.gabotechs.graphqxlideaplugin.language.psi.GraphQXLElement"
  extends="com.github.gabotechs.graphqxlideaplugin.language.psi.impl.GraphQXLElementImpl"

  psiClassPrefix="GraphQXL"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.gabotechs.graphqxlideaplugin.language.psi"
  psiImplPackage="com.github.gabotechs.graphqxlideaplugin.language.psi.impl"

  elementTypeHolderClass="com.github.gabotechs.graphqxlideaplugin.language.psi.GraphQXLTypes"
  elementTypeClass="com.github.gabotechs.graphqxlideaplugin.language.psi.GraphQXLElementType"
  tokenTypeClass="com.github.gabotechs.graphqxlideaplugin.language.psi.GraphQXLTokenType"

  implements("generic_type_def|type_def|type_ext|generic_input_def|input_def|input_ext|enum_def|enum_ext|interface_def|interface_ext|scalar_def|scalar_ext|union_def|union_ext|direcive_def|field_with_args|field_without_args|field_without_args_without_value")="com.github.gabotechs.graphqxlideaplugin.language.psi.GraphQXLNamedElement"
  mixin(     "generic_type_def|type_def|type_ext|generic_input_def|input_def|input_ext|enum_def|enum_ext|interface_def|interface_ext|scalar_def|scalar_ext|union_def|union_ext|direcive_def|field_with_args|field_without_args|field_without_args_without_value")="com.github.gabotechs.graphqxlideaplugin.language.psi.impl.GraphQXLNamedElementImpl"

  tokens = [

    // punctuation
    BANG="!"
    DOLLAR="$"
    DOLLAR_BRACE_L="${"
    PAREN_L="("
    PAREN_R=")"
    SPREAD="..."
    COLON=":"
    EQUALS="="
    AT="@"
    BRACKET_L="["
    ANGLE_BRACKET_L="<"
    BRACKET_R="]"
    ANGLE_BRACKET_R=">"
    BRACE_L="{"
    PIPE="|"
    BRACE_R="}"
    AMP="&"

    // keywords
    IMPORT_KEYWORD="import"
    QUERY_KEYWORD="query"
    MUTATION_KEYWORD="mutation"
    SUBSCRIPTION_KEYWORD="subscription"
    ON_KEYWORD="on"
    EXTEND_KEYWORD="extend"
    SCHEMA_KEYWORD="schema"
    TYPE_KEYWORD="type"
    SCALAR_KEYWORD="scalar"
    INTERFACE_KEYWORD="interface"
    IMPLEMENTS_KEYWORD="implements"
    ENUM_KEYWORD="enum"
    UNION_KEYWORD="union"
    INPUT_KEYWORD="input"
    DIRECTIVE_KEYWORD="directive"
    REPEATABLE_KEYWORD="repeatable"

    WHITE_SPACE='regexp:[,\s]+'
    EOL_COMMENT='regexp:#.*'

    // identifiers and literals
    VARIABLE_NAME='regexp:\$[_A-Za-z][_0-9A-Za-z]*'
    NAME='regexp:[_A-Za-z][_0-9A-Za-z]*'
    NUMBER='regexp:-?\d+'
    FLOAT_NUMBER='regexp:-?\d+(\.\d+)?([eE][+-]?\d+)?'

    // language injection
    TEMPLATE_CHAR='regexp:.*'
    TEMPLATE_START='${'
  ]
}

document ::= import* def*

import ::= IMPORT_KEYWORD filename
filename ::= OPEN_QUOTE char_no_double_quote CLOSING_QUOTE { pin=1 }

def ::=
    schema_def |
    schema_ext |
    generic_type_def |
    type_def |
    type_ext |
    generic_input_def |
    input_def |
    input_ext |
    enum_def |
    enum_ext |
    interface_def |
    interface_ext |
    scalar_def |
    scalar_ext |
    union_def |
    union_ext |
    directive_def

schema_def ::= description? SCHEMA_KEYWORD directive* schema_selection_set { pin=2 }
schema_ext ::= EXTEND_KEYWORD SCHEMA_KEYWORD directive* schema_selection_set? { pin=2 }
    schema_key ::= QUERY_KEYWORD | MUTATION_KEYWORD | SUBSCRIPTION_KEYWORD
    schema_selection_set ::= BRACE_L schema_field BRACE_R { pin=1 }
    schema_field ::= schema_key COLON identifier
generic_type_def ::= description_variables? description? TYPE_KEYWORD identifier directive* EQUALS modified_ref { pin=6 methods=[nameIdentifier="identifier"] }
type_def ::= description_variables? description? TYPE_KEYWORD identifier generic? implements? directive* type_selection_set { pin=3 methods=[nameIdentifier="identifier"] }
type_ext ::= EXTEND_KEYWORD TYPE_KEYWORD identifier generic? implements? directive* type_selection_set? { pin=2 methods=[nameIdentifier="identifier"] }
    type_selection_set ::= BRACE_L (field_with_args | spread_reference)* BRACE_R { pin=1 }
generic_input_def ::= description_variables? description? INPUT_KEYWORD identifier directive* EQUALS modified_ref { pin=6 methods=[nameIdentifier="identifier"] }
input_def ::= description_variables? description? INPUT_KEYWORD identifier generic? directive* input_selection_set { pin=3 methods=[nameIdentifier="identifier"] }
input_ext ::= EXTEND_KEYWORD INPUT_KEYWORD identifier generic? directive* input_selection_set? { pin=2 methods=[nameIdentifier="identifier"] }
    input_selection_set ::= BRACE_L (field_without_args | spread_reference)* BRACE_R { pin=1 }
enum_def ::= description? ENUM_KEYWORD identifier directive* enum_selection_set { pin=2 methods=[nameIdentifier="identifier"] }
enum_ext ::= EXTEND_KEYWORD ENUM_KEYWORD identifier directive* enum_selection_set? { pin=2 methods=[nameIdentifier="identifier"] }
    enum_selection_set ::= BRACE_L (field_without_args_without_value | spread_reference)* BRACE_R { pin=1 }
interface_def ::= description? INTERFACE_KEYWORD identifier implements? directive* interface_selection_set { pin=2 methods=[nameIdentifier="identifier"] }
interface_ext ::= EXTEND_KEYWORD INTERFACE_KEYWORD identifier implements? directive* interface_selection_set? { pin=2 methods=[nameIdentifier="identifier"] }
    interface_selection_set ::= BRACE_L (field_without_args | spread_reference)* BRACE_R { pin=1 }
scalar_def ::= description? SCALAR_KEYWORD identifier directive* { pin=2 methods=[nameIdentifier="identifier"] }
scalar_ext ::= EXTEND_KEYWORD SCALAR_KEYWORD identifier directive* { pin=2 methods=[nameIdentifier="identifier"] }
union_def ::= description? UNION_KEYWORD identifier directive* EQUALS other_identifier (PIPE other_identifier)* { pin=2 methods=[nameIdentifier="identifier"] }
union_ext ::= EXTEND_KEYWORD UNION_KEYWORD identifier directive* (EQUALS other_identifier)? (PIPE other_identifier)* { pin=2 methods=[nameIdentifier="identifier"] }
    other_identifier ::= identifier
directive_def ::= description? DIRECTIVE_KEYWORD AT identifier arguments? directive_repeatable? ON_KEYWORD directive_location (PIPE directive_location)* { pin=2 methods=[nameIdentifier="identifier"] }
    directive_repeatable ::= REPEATABLE_KEYWORD
    directive_location ::=
        "QUERY" |
        "MUTATION" |
        "SUBSCRIPTION" |
        "FIELD_DEFINITION" |
        "FIELD" |
        "FRAGMENT_DEFINITION" |
        "FRAGMENT_SPREAD" |
        "INLINE_FRAGMENT" |
        "SCHEMA" |
        "SCALAR" |
        "OBJECT" |
        "ARGUMENT_DEFINITION" |
        "INTERFACE" |
        "UNION" |
        "ENUM_VALUE" |
        "ENUM" |
        "INPUT_OBJECT" |
        "INPUT_FIELD_DEFINITION" |
        "VARIABLE_DEFINITION"

implements ::= IMPLEMENTS_KEYWORD identifier (AMP identifier)*
field_with_args ::= description? identifier arguments? COLON value_type directive* { pin=2 methods=[nameIdentifier="identifier"]}
field_without_args ::= description? identifier COLON value_type directive* { pin=2 methods=[nameIdentifier="identifier"]}
field_without_args_without_value ::= description? identifier directive* { pin=2 methods=[nameIdentifier="identifier"]}

arguments ::= PAREN_L argument* PAREN_R { pin=1 }
    argument ::= description? identifier COLON value_type (EQUALS value_data)? directive* { methods=[nameIdentifier="identifier"]}

function_call ::= PAREN_L function_input+ PAREN_R { pin=1 }
    function_input ::= identifier COLON value_data { pin=1 methods=[nameIdentifier="identifier"]}

description_variables ::= DOLLAR_BRACE_L description_variable+ BRACE_R
    description_variable ::= identifier COLON string_data { pin=1 methods=[nameIdentifier="identifier"]}

description ::= multiline_description | one_line_description
    multiline_description ::= OPEN_TRIPLE_QUOTE REGULAR_STRING_PART* CLOSING_TRIPLE_QUOTE { pin=1 }
    one_line_description ::= OPEN_QUOTE REGULAR_STRING_PART? CLOSING_QUOTE { pin=1 }

directive ::= AT identifier function_call? { pin=1 methods=[nameIdentifier="identifier"] }

required_modifier ::= "Required"
optional_modifier ::= "Optional"

expandable_ref ::= identifier generic_call?
modified_ref ::=
    (required_modifier ANGLE_BRACKET_L modified_ref ANGLE_BRACKET_R) |
    (optional_modifier ANGLE_BRACKET_L modified_ref ANGLE_BRACKET_R) |
    expandable_ref

value_type ::= value_non_nullable | value_array | value_basic_type
    value_array ::= BRACKET_L (value_non_nullable | value_array | value_basic_type) BRACKET_R
    value_non_nullable ::=  (value_basic_type | value_array) BANG

        value_basic_type ::= object | basic_type
            int ::= "Int"
            float ::= "Float"
            string ::= "String"
            boolean ::= "Boolean"
            basic_type ::=  int | float | boolean | string
            object ::= !(basic_type) identifier


value_data ::= object_data | list_data | basic_data
    object_data ::= BRACE_L object_entry* BRACE_R { pin=1 }
    object_entry ::= identifier COLON (basic_data | list_data | object_data)
    list_data ::= BRACKET_L (basic_data | list_data | object_data) BRACKET_R { pin=1 }
        basic_data ::= float_data | int_data | string_data | boolean_data
        int_data ::= NUMBER
        float_data ::= FLOAT_NUMBER
        string_data ::= OPEN_QUOTE REGULAR_STRING_PART? CLOSING_QUOTE
        boolean_data ::= "true" | "false"


char_no_double_quote ::= REGULAR_STRING_PART
identifier ::= NAME |
    IMPORT_KEYWORD |
    QUERY_KEYWORD |
    MUTATION_KEYWORD |
    SUBSCRIPTION_KEYWORD |
    ON_KEYWORD |
    EXTEND_KEYWORD |
    SCHEMA_KEYWORD |
    TYPE_KEYWORD |
    SCALAR_KEYWORD |
    INTERFACE_KEYWORD |
    IMPLEMENTS_KEYWORD |
    ENUM_KEYWORD |
    UNION_KEYWORD |
    INPUT_KEYWORD |
    DIRECTIVE_KEYWORD |
    REPEATABLE_KEYWORD
generic ::= ANGLE_BRACKET_L identifier identifier* ANGLE_BRACKET_R
generic_call ::= ANGLE_BRACKET_L value_type value_type* ANGLE_BRACKET_R
spread_reference ::= SPREAD modified_ref